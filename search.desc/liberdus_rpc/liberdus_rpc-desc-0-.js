searchState.loadedDescShard("liberdus_rpc", 0, "This is the main module of the JSON-RPC server.\nShared state accessible across multiple threads.\nArchiver Utility Module\nThis module provides utilities to interact with a …\nConfiguration for the rpc server.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the node management logic require for …\nInstance of the <code>Liberdus</code> backend library.\nThe main entry point for the application.\nRPC Methods for Interacting with the Liberdus Backend.\nThis module provides utilities to handle RPC calls for …\nDiscovers active archivers in the network.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the original data of a transaction.\nRepresents a single transaction.\nRepresents the API response for transaction queries.\nContains error details if the operation was not successful.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPlaceholder function for fetching messages.\nFetches a specific transaction by its ID.\nFetches the transaction history for a specific account.\nInserts a key-value pair into a JSON object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe original transaction data.\nIndicates if the operation was successful.\nA list of transactions returned by the API.\nThe transaction data as a JSON value.\nThe unique identifier for the transaction.\nStandalone network mean that consensus node and archivers …\nThis is a system directory path to the archiver seed file …\nCollector configuration\nThis is currently not used anywhere\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum time in milliseconds that the rpc will cancel …\nThe interval in seconds at which the node list will be …\nThe port on which the RPC server will listen\nStandalone network configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHashes the input string using the specified format.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new ShardusCrypto instance with the given key.\nSigns the input data using the provided secret key.\nVerifies a signature using the provided public key.\nCalculates a node’s bias for weighted random selection …\nDiscovers new chat messages for all subscribed chat rooms …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function is the defecto way to get a consensor. When …\nSelects a random node from the active list based on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes and maintains a cumulative bias distribution for …\nRetrieves account details for a specific address.\nRetrieves chat messages for a specific chat ID.\nFetches the transaction history for a specific account.\nRetrieves the receipt of a specific transaction.\nSends a transaction to the Liberdus backend with retry …\nSubscribes to a chat room for updates.\nUnsubscribes from a chat room.\nRepresents an error response for JSON-RPC.\nRepresents an incoming JSON-RPC request.\nRepresents a JSON-RPC response.\nError code.\nThe error object, if the method call failed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a JSON-RPC error response.\nCreates a JSON-RPC success response.\nGenerates a UUID-like string based on the current …\nHTTP entry point for handling JSON-RPC requests.\nUnique identifier for the request.\nUnique identifier for the response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJSON-RPC protocol version.\nJSON-RPC protocol version.\nError message.\nThe name of the method being invoked.\nParameters for the method call, if any.\nThe result of the method call, if successful.\nHandles RPC requests by routing them to the appropriate …\nWebSocket entry point for handling JSON-RPC requests.")